
/* BF INTERPRETER IN MONGA
Copyright 25/10/16 
Modified  13/11/16
Lucas Menezes */


int exit(int number);
char getchar();
void putchar(char c);

void error(char[] errorString, int signal) {
	@ errorString ;
	exit(signal);
}
void execute(char[] program)
{
	/*does array contains its size? */
	/* expects it to finish with null? */
	char[] memory; 
	int prgIdx;
	int memIdx;
	int[] loopStack;
	int stackIdx;
	int internalLoopCount;
	memory = new char[30000];
	prgIdx = 0;
	memIdx = 0;
	loopStack = new int[500]; 
	stackIdx = 0;

	while(program[prgIdx]) /*assume it finishes in null like a C String*/
	{
		if(program[prgIdx] == '>') {
			memIdx = memIdx + 1;
			if(memIdx > 30000) 
				error("Access Violation",-1);
		} else
		if(program[prgIdx] == '<') {
			memIdx = memIdx - 1;
			if(memIdx < 0) 
				error("Access Violation",-1);
		} else
		if(program[prgIdx] == '+') {
			memory[memIdx] = (memory[memIdx] as int) + 1;
		} else
		if(program[prgIdx] == '-') {
			memory[memIdx] = (memory[memIdx] as int) - 1;
		} else
		if(program[prgIdx] == ',') {
			memory[memIdx] = getchar();
		} else
		if(program[prgIdx] == '.') {
			putchar(memory[memIdx]);
		} else
		if(program[prgIdx] == '[') {
			if(memory[memIdx]){
				loopStack[stackIdx] = prgIdx;
				stackIdx = stackIdx + 1;
			}
			else {
				/*jump to next ]*/
				prgIdx = prgIdx + 1;
				internalLoopCount = 0;
				while(!(program[prgIdx] == ']' && internalLoopCount == 0)) 
				/* while not match stop requirements*/
				{
					if(program[prgIdx] == '[')
					{
						internalLoopCount = internalLoopCount + 1;
					}
					else if(program[prgIdx] == ']')
					{
						internalLoopCount = internalLoopCount - 1;
	
					}
					prgIdx = prgIdx + 1;
				}

			}
		} else
		if(program[prgIdx] == ']') {

			if(memory[memIdx]) {
				prgIdx = loopStack[stackIdx];
			}
			else {
				stackIdx = stackIdx - 1;
			}
		} else {

		}
		prgIdx = prgIdx + 1;
	}
}
void main (int argc, char[][] argv) {
	char[] programStr;
	programStr =  ",[.,]";
	execute(programStr);
}





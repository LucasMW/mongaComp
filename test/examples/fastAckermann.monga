/* Ackermann Function in Monga
Copyright 23/12/16 
Modified  24/12/16
Lucas Menezes */

int atoi(char[] str);

void printAck(int m,int n) 
{
    @"A(";@m;@",";@n;@")"; 
}

int[][] ackvalues;
int limit; 
int ackermann(int m, int n)
{   int r;
		
        if(n<limit && ackvalues[m][n] > 0) {
            return ackvalues[m][n];
        }
        if (!m) { 
        	printAck(m,n);@" = ";@n+1; @"\n";
            ackvalues[m][n] = n + 1;
        	return n + 1;
        }
        if (!n) { 
        	printAck(m,n); @" = "; printAck(m-1,1); @"\n";
            r = ackermann(m - 1, 1);
            ackvalues[m][n] = r;
            return r;
        }
        printAck(m,n);@" = ";@"A(";@m-1;@","; printAck(m,n-1);@")\n"; 
        r = ackermann(m - 1, ackermann(m, n - 1));
        ackvalues[m][n] = r;
        return r;
}
 
void startAckValues(int m,int n) {

    int i,j;
    ackvalues = new int[][m+1];
    limit = 10000000;
    i=0;
    while(i<m+1) {
        ackvalues[i]= new int[limit+1];
        j=0;
        while(j<limit+1) {
            ackvalues[i][j] = 0;
            j=j+1;
        }
        i=i+1;
    }

}
int main(int argc, char[][] argv)
{
	int m, n;
    
	int r;
	if(argc>=3) {
		m = atoi(argv[1]);
		n = atoi(argv[2]);
	}
	else {
		m = 1; n = 10;
	}
    startAckValues(m,n);
    r = ackermann(m, n);
    @"Threfore:\n";
    printAck(m,n);@" = ";@r;@"\n"; 
 
    return 0;
}